// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addCategory = `-- name: AddCategory :one
INSERT INTO categories (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) AddCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, addCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const addTag = `-- name: AddTag :one
INSERT INTO tags (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) AddTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, addTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const addVideo = `-- name: AddVideo :one
INSERT INTO video (
  name,
  description,
  author_id,
  category_id
) VALUES ($1, $2, $3, $4)
RETURNING id, name, description, author_id, category_id, upvotes, downvotes, views, updated_at, created_at, deleted_at
`

type AddVideoParams struct {
	Name        string
	Description string
	AuthorID    sql.NullInt64
	CategoryID  sql.NullInt64
}

func (q *Queries) AddVideo(ctx context.Context, arg AddVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, addVideo,
		arg.Name,
		arg.Description,
		arg.AuthorID,
		arg.CategoryID,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AuthorID,
		&i.CategoryID,
		&i.Upvotes,
		&i.Downvotes,
		&i.Views,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const addVideoFile = `-- name: AddVideoFile :exec
INSERT INTO video_files (
  file_path,
  video_id,
  file_size,
  duration,
  resolution
) VALUES ($1, $2, $3, $4, $5)
`

type AddVideoFileParams struct {
	FilePath   string
	VideoID    int64
	FileSize   int64
	Duration   int32
	Resolution Resolution
}

func (q *Queries) AddVideoFile(ctx context.Context, arg AddVideoFileParams) error {
	_, err := q.db.ExecContext(ctx, addVideoFile,
		arg.FilePath,
		arg.VideoID,
		arg.FileSize,
		arg.Duration,
		arg.Resolution,
	)
	return err
}

const addVideoTag = `-- name: AddVideoTag :exec
INSERT INTO video_tags (video_id, tag_id) VALUES ($1, $2) RETURNING id, video_id, tag_id
`

type AddVideoTagParams struct {
	VideoID int64
	TagID   int64
}

func (q *Queries) AddVideoTag(ctx context.Context, arg AddVideoTagParams) error {
	_, err := q.db.ExecContext(ctx, addVideoTag, arg.VideoID, arg.TagID)
	return err
}

const addVideoThumbnail = `-- name: AddVideoThumbnail :exec
INSERT INTO video_thumbnails (
  video_id,
  file_size
) VALUES ($1, $2)
`

type AddVideoThumbnailParams struct {
	VideoID  int64
	FileSize int32
}

func (q *Queries) AddVideoThumbnail(ctx context.Context, arg AddVideoThumbnailParams) error {
	_, err := q.db.ExecContext(ctx, addVideoThumbnail, arg.VideoID, arg.FileSize)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email, password) VALUES ($1, $2)
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Email, arg.Password)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name FROM categories LIMIT $1 OFFSET $2
`

type GetAllCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllCategories(ctx context.Context, arg GetAllCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPackagesByUserID = `-- name: GetPackagesByUserID :many
SELECT id, user_id, tier, created_at, valid_from, valid_until FROM
  users_packages
WHERE
  user_id = $1
  AND
  (now()::timestamp with TIME ZONE) BETWEEN valid_from AND valid_until
ORDER BY
  created_at DESC
LIMIT 10
`

func (q *Queries) GetPackagesByUserID(ctx context.Context, userID int64) ([]UsersPackage, error) {
	rows, err := q.db.QueryContext(ctx, getPackagesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPackage
	for rows.Next() {
		var i UsersPackage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Tier,
			&i.CreatedAt,
			&i.ValidFrom,
			&i.ValidUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name FROM tags WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, verified_at, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, verified_at, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
