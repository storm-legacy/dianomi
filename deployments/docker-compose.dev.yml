version: '3'

networks:
  reverse-proxy-net:
    name: dianomi-reverse-proxy-net

  db-net:
    name: dianomi-db-net

volumes:
  pgdata: {}
  pgadmin: {}

services:
  traefik:
    image: traefik:v2.9
    hostname: traefik-container
    restart: &RESTART_POLICY ''
    networks:
      reverse-proxy-net: {}
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 8080:8080/tcp
    command:
      - --global.checknewversion=false
      - --global.sendAnonymousUsage=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=dianomi-reverse-proxy-net
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --log.level=INFO
      - --api=true
      - --api.insecure=true
      - --log.level=INFO
      # - "--accessLog"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TZ: Europe/Warsaw

  # FRONTEND
  client:
    image: node:18-alpine
    user: 1000:1000
    working_dir: /src
    restart: *RESTART_POLICY
    labels:
      traefik.enable: true
      traefik.http.services.client-service.loadbalancer.server.port: 5173
      traefik.http.routers.client-router.service: client-service
      traefik.http.routers.client-router.entrypoints: websecure
      traefik.http.routers.client-router.rule: Host(`127.0.0.1`) || Host(`localhost`)
      traefik.http.routers.client-router.tls: true
    hostname: client
    command: /bin/sh -c "npm i && npm run dev"
    networks:
      reverse-proxy-net: {}
    volumes:
      - ../:/src:rw

  # BACKEND
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    hostname: server
    restart: *RESTART_POLICY
    labels:
      traefik.enable: "true"
      traefik.http.services.server-service.loadbalancer.server.port: 3000
      traefik.http.routers.server-router.service: server-service
      traefik.http.routers.server-router.tls: true
      traefik.http.routers.server-router.entrypoints: websecure
      traefik.http.routers.server-router.rule: (Host(`127.0.0.1`) || Host(`localhost`)) && PathPrefix(`/api`)
    command: -c air.toml
    user: 1000:1000
    networks:
      reverse-proxy-net: {}
      db-net: {}
    working_dir: /src
    env_file:
      - ../backend/.env
    depends_on:
      - db
    volumes:
      - ../backend:/src:rw

  minio:
    image: quay.io/minio/minio:latest
    hostname: minio-s3
    restart: *RESTART_POLICY
    command: server --console-address ":9001" /data
    networks:
      reverse-proxy-net: {}
    ports:
      - 9000:9000/tcp
      - 9001:9001/tcp
    volumes:
      - ./minio-s3/:/data:rw
    environment:
      MINIO_CONFIG_ENV_FILE: "/etc/config.env"
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: Qwerty123!
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_SERVER_URL: http://localhost:9000
      MINIO_IDENTITY_PLUGIN_URL: http://server:3000/api/v1/auth/minio
      MINIO_IDENTITY_PLUGIN_ROLE_POLICY: consoleAdmin
      MINIO_IDENTITY_PLUGIN_TOKEN: Bearer TOKEN
      MINIO_IDENTITY_PLUGIN_ROLE_ID: dianomi-server-auth
      MINIO_IDENTITY_PLUGIN_COMMENT: DianomiTV JWT

  # DATABASE
  db:
    image: postgres:15.2-alpine
    restart: *RESTART_POLICY
    hostname: postgres
    networks:
      db-net: {}
    ports:
      - 5432:5432/tcp
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
      - ../backend/schema.sql:/docker-entrypoint-initdb.d/00_schema.sql:ro
    env_file:
      - ../backend/.env
